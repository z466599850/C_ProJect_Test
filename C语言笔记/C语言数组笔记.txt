数组

本章重点
1.一维数组的创建和初始化
2.一维数组的使用
3.一维数组在内存中的存储
4.二维数组的创建和初始化
5.二维数组的使用
6.二维数组在内存中的存储
7.数组作为函数参数
8.数组的应用实例1:三子棋
9.数组的应用实例2:扫雷游戏

正文开始

一维数组的创建和初始化

数组的创建

数组是一组相同类型元素的集合。数组的创建方式：



/*int main()
{
	//创建一个数组- 存放整型 - 10个
	//int arr[10] = { 1,2,3 };//不完全初始化，剩下的元素默认初始化为0
	//char arr2[5] = { 'a',98 };//显示的是b  因为b的ASCII 码值对应的是98 //不完全初始化，剩下的元素默认初始化为0
	//char arr3[5] = "ab";//这样的写法也是ok的 这样的写法后面有个\0 所以后面没有0 看的时候有但跟上面的不一样
	char arr4[] = "abcdef";//这样的写法也是OK的 不输入存放多少 会自动存放
	printf("%d", sizeof(arr4));//7个
	//sizeof 计算 arr4所占空间的大小
	//7个元素 - char 7*1 = 7

	printf("%d", strlen(arr4));//6个
	//stlen 求字符串的长度- '\0'之前的字符个数
	//[a b c d e f \0]
	//6

	//总结 sizeof(arr4));//包括字符零 strlen(arr4));//不包括字符0
	//     sizeof 是求数组长度，strlen是求字符串长度的


	//int n = 5;
	//cahr ch=[n];//NO 不能这样写 中括号里面要放常量 不能放变量
	return 0;
}*/

//1.strlen 和sizeof 没有什么关联
//2.strlen 是求字符串长度的-只能针对字符串长度- 库函数 - 使用引头文件
//3.sizeof 计算变量、数组、类型的大小- 单位是字节- 操作符



int main()
{
	char arr1[] = "abc";
	char arr2[] = { 'a','b','c' };
	printf("%d\n", sizeof(arr1));//4 //空间的大小 a b c \0
	printf("%d\n", sizeof(arr2));//3 空间的大小 a b c
	printf("%d\n", strlen(arr1));//3 abc \0 他遇到\0了 就结束了 但不包含\0哦！ 
	printf("%d\n", strlen(arr2));//随机值 stlen 只看到了avc没有看到 \0 所以他不知道怎么结束
	 //strlen 只求\0之前的数
	return 0;
}


一维数组的使用
 对于数组的使用我们之前介绍了一个操作符:[]，下标引用操作符。它其实就数组访问的操作符。我
 们来看代码:



/*int main()
{
	char arr[] = "abcdef";//[a][b][c][d][e][f][\0]
	//printf("%c ", arr[3]);
	int i = 0;
	int len = strlen(arr);
	for (i = 0; i < len; i++)
	{
		printf("%c ", arr[i]);
	}
	return 0;
}*/


int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);//计算数组的元素个数
	//对数组内容赋值，数组是使用下标来访问的，下标从0开始。所以：
	int i = 0;//做下标
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);//引用下标哦
	}
	return 0;
}



一维数组在内存中的存储

接下来我们探讨数组在内存中的存储。 看代码


int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);//计算数组的元素个数
	int i = 0;//定义一个数组下标
	for (i = 0; i <= sz; i++)
	{
		printf("arr[%d]= %p\n" ,i,&arr[i]);//打印出来的数组在内存中是连续存放的 由低地址到高地址
	}
}
//回答问strlen的那个：strlen只能计算字符串的长度，这里元素是整形数，所以不行


二维数组的创建和初始化

二维数组的创建  二维数组和一维数组有什么区别呢，其实区别不大，只是形式上有区别而已


二维数组的创建

//数组创建
int main()
{
	int arr[3][4];//3行4列
	char ch[5][6];//3行4列
	double arr[2][4];//3行4列
}


二维数组的初始化

//二维数组的初始化

int main()
{
	int arr[3][4] = { 1,2,3,4 }; //在第一行显示1234
	int arr[3][4] = { {1,2},{4,5} };//在第一行显示1，2 第二行显示 4，5
	int arr[][4] = { {2,3},{4,5} };//行可以省略但列一定不能省略
	return 0;
}


二维数组的使用


二维数组的使用也是通过下标的方式。看代码：

int main()
{
	int arr[3][4] = { {1,2,3,4},{4,5} };
	int i = 0;//二维数组依然是通过下标访问的
	for (i = 0; i <3; i++)//打印二维数组，两个for循环，外层控制行，内层控制列
	{
		int j = 0;
		for (j = 0; j < 4; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}
	//char ch[5][6];
	//int arr[] = { 1,2,3,4 };
	//int arr[][4] = { {1,2,3,4},{5,6,7,8} };
	return 0;
}


二维数组在内存中的存储

像一维数组一样，这里我们尝试打印二维数组的每个元素。

int main()
{
	int arr[3][4] = { {1,2,3,},{4,5} };
	int i = 0;//二维数组依然是通过下标访问的
	for (i = 0; i < 3; i++)//打印二维数组，两个for循环，外层控制行，内层控制列
	{
		int j = 0;
		for (j = 0; j < 4; j++)
		{
			printf("&arr[%d][%d]= %p\n",i,j ,&arr[i][j]);
		}
		printf("\n");
	}
	return 0;

	//int类型定义占4个字节，你用char的话，就是间隔为1了
	用的是int类型所以占的是4个字节的内存

	通过结果我们可以分析到，其实二维数组在内存中也是连续存储的



数组作为函数参数
  往往我们在写代码的时候，会将数组作为参数传个函数，比如:我要实现一个冒泡排序( 这里要讲算法
  思想)函数将一个整形数组排序。那我们将会这样使用该函数:
当数组传参的时候，实际上只是把数组的首元素的地址传递过去了

  void bubble_sort(int arr[],int sz)
{
	//确定冒泡排序的趟数
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int flag = 1;//假设这一趟要排序的数据已经有序
		//每一趟冒泡排序
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				flag = 0;//本趟排序的数据其实不完全有序
			}
		}
		if (flag == 1)
		{
			break;
		}
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,9,8,0 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//对数组进行排序，排成升序
	//arr是数组，我们对数组arr进行传参，实际上传过去的是数组arr首元素的地址 &arr[0]
	bubble_sort(arr, sz);//bubble冒泡 sort排序 冒泡排序函数
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}



难道数组作为函数参数的时候，不是把整个数组的传递过去?

数组名是什么?

int main()
{
	int arr[] = { 1,2,3,4,5,6,7 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	//1. sizeof(数组名) - 数组名表示整个数组，sizeof (数组名)计算的是整个数组的大小，单位是字节
	printf("%p\n", arr);
	printf("%p\n", &arr);
	printf("%d\n", *arr);
	return 0;
}

结论:
    数组名是数组首元素的地址。 (有两个例外 )


int main()
{
	int arr[] = { 1,2,3,4,5,6,7 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	//1. sizeof(数组名) - 数组名表示整个数组，sizeof (数组名)计算的是整个数组的大小，单位是字节
	//2. &数组名，数组代表真个数组，&数组名，取出的是整个数组的地址
	printf("%p\n", arr);
	printf("%p\n", arr+1);

	printf("%p\n", &arr[0] + 1);
	printf("%p\n", &arr[0] + 1);

	printf("%p\n", &arr);
	printf("%p\n", &arr+1);

	printf("%d\n", *arr);
	printf("%d\n", *arr+1);
	return 0;
}

补充:
  1.sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数
  2.&数组名，取出的是数组的地址。&数组名，数组名表示整个数组。

除此1,2两种情况之外，所有的数组名都表示数组首元素的地址。


