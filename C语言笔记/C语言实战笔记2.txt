360笔试题：
int main()
{
	int i = 0, a = 0, b = 2, c = 3, d = 4;
	//i = a++ && ++b && d++;//逻辑与&& 结果为什么是1234呢 因为a++是 后置++ 先使用后加加，先使用是 = 0的，
						 //逻辑与只要有一个为假，那后面的都不执行，再回来a++那就是a=1；
							//如果左边为假，右边的就不要算了
	i = a++ || ++b || d++;
							//逻辑|| 结果为什么是 1 3 3 4呢 因为||只要有一个是真 那么后面就不执行了 
							//左边如果为真，右边的那就不要算了
	printf("a = %d b = %d c = %d d = %d ", a, b, c, d);//逻辑与&&是1 2 3 4 逻辑或是||是1 3 3 4
	return 0;
	//程序的输出结果是什么？
}


题目：统计二进制中1的个数  一定要学会这道题各大公司都在考这个面试题  牛客网OJ链接
////第一种算法
//int count_bit_one(unsigned int n)//加入unsigned 是因为如果填 -1的话就会程序错误，这个时候改成无符号就行
//{
//	int count = 0;
//	while (n)//进入循环
//	{
//		if (n % 2 == 1)
//		{
//			count++;
//		}
//		n = n / 2;
//	}
//	return count;
//}

//int count_bit_one(int n)//第二种算法
//{
//	int count = 0;
//	int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (((n >> i) & 1) == 1)
//		{
//			count++;
//		}
//	}
//	return count;
//}

//谷歌的一道面试题
int count_bit_one(int n)//第三种算法 这种写法是最经典的写法
{
	int count = 0;
	while (n)
	{
		n = n & (n - 1);
		count++;
	}
	return count;
}
//n = n&(n-1)
//n
//13
//1101 n
//1100 n-1
//1100 n
//1011 n-1
//0111 n-1
//0000 n    每次减一都会消失一个0
int main()
{
	//统计二进制中1的个数
	//一个数真正在内存中存储的是补码
	int a = 0;
	scanf("%d", &a);
	//写一个函数求a的二进制(补码)表示中有几个1
	int count = count_bit_one(a);
	//13
	//00000000000000000000000000001101
	printf("count = %d\n", count);
	//system("pause");//system库函数- 执行系统命令 - pause(暂停)
	return 0;
}









题目：求二进制中不同位的个数
int get_diff_bit(int m, int n)
{
	int count = 0;
	 int tmp = m ^ n; 
	 while (tmp)
	 {
		tmp = tmp & (tmp - 1);
		count++;
	 }
	return count;

}
int main()
{
	int m = 0;
	int n = 0;
	scanf("%d%d", &m, &n);
	int count = get_diff_bit(m,n);
	printf("count = %d\n", count);
	return 0;
}










题目：获取一个整数序列中所有的偶数维和奇数位，分别打印出二进制序列
void print(int m)
{
	int i = 0;
	printf("奇数位:\n");
	for (i = 30; i >= 0; i -= 2)
	{
		printf("%d ", (m >> i) & 1);//每次调用m就会重置
	}
	printf("\n");
	printf("偶数位:\n");
	for (i = 31; i >= 1; i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
	printf("\n");
}
int main()
{
	int m = 0;
	scanf("%d", &m);
	print(m);
	return 0;
}






题目：使用指针打印数组内容
void print(int* p, int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", *(p + i));
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	print(arr, sz);
}






题目：打印乘法口诀表
要求：实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定
如：输入9，输出9*9扣具表，输出12，输出12*12的乘法口诀表
void print_table(int n)
{
	int i = 0;
	for (i = 1; i <= n; i++)
	{
		int j = 0;
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%-3d", i, j, i * j);//负号是左对齐，3是打印三位，不足三位的用空格代替
		}
		printf("\n");
	}	
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	print_table(n);
	return 0;
}











//题目：字符串逆序
//要求：写一个函数，可以逆序一个字符串，还有空格

void Reverse(char* str)
{
	int sl = strlen(str);

	char* left = str;
	char* right = str + sl - 1;
	//交换
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}

}

int main()
{
	char s[100] = { 0 };
	scanf("%s", s);
	//逆序函数
	Reverse(s);
	//打印
	printf("%s", s);
	return 0;
}




//水仙花
int main()
{
	int i = 0;
	for (i = 0; i <= 100000; i++)
	{
		//判断i是否为水仙花数(自幂数)
		//1.计算i的位数 - n位数
		int n = 1;
		int tmp = i;
		int sum = 0;
		while (tmp /= 10)
		{
			n++;
		}
		//2.计算i的每一位n次方之和 sum
		tmp = i;
		while (tmp)
		{
			sum += pow(tmp % 10, n);//判断次方用的函数 头文件 math.h
			tmp /= 10;
		}
		//3.比较i ==sum
		if (i == sum)
		{
			printf("%d ", i);
		}
	}
	return 0;
}

打印水仙花

int main()
{
	int line = 0;
	scanf("%d", &line);
	int i = 0;
	for (i = 0; i <line ; i++)
	{
		//打印上半部分
		//打印空格
		int j = 0;
		for (j = 0; j < line -1-i; j++)
		{
			printf(" ");
		}
		//打印*
		for (j = 0; j < 2*i+1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	for (i = 0; i < line - 1; i++)
	{
		//打印空格
		int j = 0;
		for (j = 0; j <=i;j++)
		{
			printf(" ");
		}
		//打印*
		for (j = 0; j <2*(line-1-i)-1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	return 0;
}



//题目：喝汽水问题
//要求：喝汽水，1瓶汽水1元，2个空瓶可以换一瓶汽水，给20元，可以多少汽水(编程实现)
//1瓶 = 1元  2空瓶 = 一瓶 20元可以买多少汽水
int main()
{
	int money = 0;
	int total = 0;
	int empty = 0;
	printf("花多少钱买汽水;>");
	scanf("%d", &money);
	//第二种写法
	if (money == 0)
	{
		total = 0;
	}
	else
	{
		total = money * 2 - 1;
	}
	printf("%d\n", total);
	//第一种写法
	////买回来的汽水喝掉
	//total = money;
	//empty = money;
	////换回来的汽水
	//while (empty >= 2)
	//{
	//	total += empty / 2;
	//	empty = empty / 2 + empty % 2;
	//}
	return 0;
}




//题目：调整奇数偶数顺序
//要求：调整数组使奇数全部都位于偶数前面。
//输入一个整数数组，实现一个函数，
//来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分，
//所有偶数位于数组的后半部分。
void print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}

void move(int arr[], int sz)
{
	int left = 0;
	int right = sz - 1;
	//判断奇数
	while (left < right && arr[left] % 2 == 1)
	{
		left++;
	}

	//判断偶数
	while (left < right && arr[right] % 2 == 0)
	{
		right--;
	}
	//交换
	if (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = arr[tmp];
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	move(arr, sz);
	print(arr, sz);
	return 0;
}



//请问输出的结果是什么
int main()
{
	unsigned char a = 200;
	unsigned char b = 100;
	unsigned char c = 0;

	//整型提升：因为他是两个char类型进行相加 所以要整型提升
	// 1个字节 = 8 bit位
	// 0000000000000000000000000000000011001000 - a 因为char类型只能取8个比特位 但是需要补齐，又因为unsigned 是无符号 所以补0 要是有符号位需要按符号位补齐
	// 0000000000000000000000000000000001100100 - b 因为char类型只能取8个比特位 但是需要补齐，又因为unsigned 是无符号 所以补0 要是有符号位需要按符号位补齐
	// 0000000000000000000000000000000100101100 - 又因为内存存的是补码 因为是正数 原反补相同 所以算出来的是300 
	// 
	// 0000000000000000000000000000000000101100 - c 因为char类型只能取8个比特位 但是需要补齐，又因为unsigned 是无符号 所以补0 要是有符号位需要按符号位补
	// 0000000000000000000000000000000000101100 - c结果 又因为 只能取8个比特位 内存存的是补码 因为是正数 原反补相同 所以算出来的是44
	// 
	//0000000000000000000000000000000011001000 只能取8个 因为char类型是一个字节 只能取8个比特位
	//
	//0000000000000000000000000000000001100100 只能取8个 因为char类型是一个字节 只能取8个比特位
	//

	c = a + b;
	printf("%d %d", a + b, c);//300 44
	return 0;
}



/*//请问输出的结果是什么
int main()
{
	char a[1000] = { 0 };
	int i = 0;
	for (i = 0; i < 1000; i++)
	{
		a[i] = -1 - i;
	}
	//-1 -2 ... -128 127 126 125 ... 3 2 1 0 -1 2 ...
	printf("%d\n", strlen(a));
	return 0;
}*/




/*//题目：杨辉三角
//在屏幕上打印杨辉三角。
// 1
// 1 1
// 1 2 1
// 1 3 3 1
int main()
{
	int arr[10][10] = { 0 };
	int i = 0;
	int j = 0;
	//定义行和列
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (j == 0)
			{
				arr[i][j] = 1;
			}
			if ( i == j)
			{
				arr[i][j] = 1;
			}
			if (i >= 2 && j >= 1)
			{
				arr[i][j] = arr[i - 1][j] + arr[i - 1][j - 1];
			}
		}
	}
	//打印
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j <= i; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}

	return 0;
}*/



/*//题目：猜凶手
//内容：
//日本某地发生了一件谋杀案，警察通过排查确定杀人凶手必为4个嫌疑犯的一个。
//
//
//
//以下为4个嫌疑犯的供词:
//
//A说：不是我。
//
//B说：是C。
//
//C说：是D。
//
//D说：C在胡说
//
//已知3个人说了真话，1个人说的是假话。
//
//现在请根据这些信息，写一个程序来确定到底谁是凶手。

int main()
{
	int killer = 0;
	for (killer = 'a'; killer <= 'd'; killer++)
	{
		if ((killer != 'a') + (killer == 'c') + (killer == 'd') + (killer != 'd') == 3)
		{
			printf("killer = %c\n", killer);
		}
	}
	return 0;
//找工作的时候会考
//赛马问题: 有36匹马，6个跑道，没有计时器，请赛马确定，36匹马中的前三名。
//请问最少比赛几次?
//
//赛马问题: 有25匹马，5个跑道，没有计时器，请赛马确定，25匹马中的前三名。
//请问最少比赛几次?
//...
//烧香问题
//有一个种香，材质不均匀，但是每一根这样的香，燃烧完恰好是1个小时
//给你2跟香，帮我确定一个15分钟的时间段
}*/



/*//题目名称:
//猜名次
//题目内容 :
//5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果!
//A选手说 : B第二，我第三
//B选手说 : 我第二，E第四;
//C选手说: 我第一，D第二
//D选手说 : C最后，我第三;
//E选手说:我第四，A第一;
//比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。

int main()
{
	int a = 0;
	int b = 0;
	int c = 0;
	int d = 0;
	int e = 0;
	for (a = 1; a <= 5; a++)
	{
		for (b = 1; b <= 5; b++)
		{
			for (c = 1; c <= 5; c++)
			{
				for(d=1;d<=5;d++)
				{
					for (e = 1; e <= 5; e++)
					{
						if (((b == 2) + (a == 3) == 1) &&
							((b == 2) + (e == 4) == 1) &&
							((c == 1) + (d == 2) == 1) &&
							((c == 5) + (d == 3) == 1) &&
							((e == 4) + (a == 1) == 1))
						{
							if (a * b * c * d * e == 120)
								printf("a = %d,b = %d,c = %d,d =  %d,e =  %d", a, b, c, d, e);
						}

					}
				}
			}
		}
	}
	return 0;
}*/




int main()
{
	//申请空间
	int* p = malloc(10 * sizeof(int));
	//使用空间
	//******
	//释放空间
	free(p);
	*p = NULL;
	return 0;
}





【题目名称】

下面哪个是函数指针？(   )

【题目内容】

A.    int* fun(int a, int b);

B.    int(*)fun(int a, int b);

C.    int (*fun)(int a, int b);

D.    (int *)fun(int a, int n);




//输出的结果是什么，并解释为什么输出这个结果
int main()
{
	char str1[] = "hello bit";
	char str2[] = "hello bit";
	char *str3 = "hello bit";
	char *str4 = "hello bit";

	if (str1 == str2)
		printf("str1 and str2 are same\n");
	else
		printf("str1 and str2 are not same\n");
	if (str3 == str4)
		printf("str3 and str4 are same\n");
	else
		printf("str3 and str4 are not same\n");
	return 0;
}





题目名称:
关于回调函数描述错误的是 ()
题目内容:
A.回调函数就是一个通过函数指针调用的函数
B.回调函数一般通过函数指针实现
c.回调函数一般不是函数的实现方调用，而是在特定的场景下，由另外一方调用
D.回调函数是调用函数指针指向函数的函数。 正确说法：回调函数是调用函数指针指向的函数。





下面程序的结果是：（ ）

int main()
{
  int aa[2][5] = {10,9,8,7,6,5,4,3,2,1};
  int *ptr1 = (int *)(&aa + 1);
  int *ptr2 = (int *)(*(aa + 1));
  printf( "%d,%d", *(ptr1 - 1), *(ptr2 - 1));
  return 0;
}
【题目内容】

A. 1, 6

B. 10, 5

C. 10, 1

D. 1, 5





//【题目名称】
//字符串左旋
//【题目内容】
//实现一个函数，可以左旋字符串中的k个字符。
//例如：
//ABCD左旋一个字符得到BCDA
//ABCD左旋两个字符得到CDAB
//abcdef
void reverse(char* left, char* right)
{
	assert(left != NULL);
	assert(right != NULL);

	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		*left++;
		*right--;
	}
}
void arr_move(char* arr, int k)
{
	assert(arr != NULL);
	int len = strlen(arr);
	assert(k <= len);
	reverse(arr, arr+ k - 1);//逆序左边 bacdef
	reverse(arr+k,arr+len-1);//逆序右边 bafdec
	reverse(arr, arr + len - 1);//逆序整体 cedfab
}
int main()
{
	char arr[] = "abcdef";
	arr_move(arr, 2);
	printf("%s", arr);
	return 0;
}




/*【题目名称】

字符串旋转结果

【题目内容】

写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符串。



例如：给定s1 = AABCD和s2 = BCDAA，返回1

给定s1 = abcd和s2 = ACBD，返回0.



AABCD左旋一个字符得到ABCDA

AABCD左旋两个字符得到BCDAA

AABCD右旋一个字符得到DAABC*/


void reverse(char* left, char* right)
{
	assert(left != NULL);//#include <assert.h>引用头文件
	assert(right != NULL);

	//进行交换
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		*left++;
		*right--;
	}
}

void left_move(char* arr, int k)
{
	assert(arr != NULL);
	int len = strlen(arr);
	assert(k <= len);
	reverse(arr, arr + k - 1);//逆序左边 bacdef
	reverse(arr + k, arr + len - 1);//逆序右边 bafdec
	reverse(arr, arr + len - 1);//逆序整体 cedfab
}

int is_arr_move(char* arr1, char* arr2)
{
	int len = strlen(arr1);
	int i = 0;
	for (i = 0; i < len; i++)
	{
		left_move(arr1, 1);
		int ret = strcmp(arr1, arr2);
		if (ret == 0)
			return 1;
	}
	return 0;

}

int main()
{
	char arr1[] = "abcdef";
	char arr2[] = "cdefab";

	int ret = is_arr_move(arr1, arr2);
	if (ret == 1)
	{
		printf("YES\n");
	}
	else
		printf("NO\n");
	return 0;
}





//【题目名称】
//字符串旋转结果
//【题目内容】
//
//写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符串。
//
//例如：给定s1 = AABCD和s2 = BCDAA，返回1
//给定s1 = abcd和s2 = ACBD，返回0.
//AABCD左旋一个字符得到ABCDA
//AABCD左旋两个字符得到BCDAA
//AABCD右旋一个字符得到DAABC

int is_s1_move(char* s1, char* s2)
{
	int len1 = (int)strlen(s1);
	int len2 = (int)strlen(s2);
	if (len1 != len2)
	{
		return 0;
	}
	//1.在s1字符串中追加一个str1字符串
	//strcat
	//strncat
	strncat(s1, s1, 6);//往后面追加一个他的数
	//2.判断s2指向的字符串是否是s1指向的字符串的子串
	char* ret = strstr(s1, s2);//strstr-找子串的 找到返回他的子串的地址，找不到返回一个空指针
	if (ret == NULL)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

int main()
{
	char s1[30] = "abcdef";
	char s2[] = "cdefab";
	int ret = is_s1_move(s1, s2);
	if (ret == 1)
	{
		printf("Yes\n");
	}
	else
	{
		printf("NO\n");
	}
	return 0;
}






//题目名称:
//杨氏矩阵
//题目内容 :
//	有一个数字短阵，短阵的每行从左到右是递增的，短阵从上到下是递增的，请编写程序在这样的矩阵中查找某个数字是否存在。
//	要求 : 时间复杂度小于o(N);

int Find_arr(int arr[3][3],int k, int* px, int* py)
{
	int x = 0;//找到第一行
	int y = *py - 1;//找到右上角
	while (x <= *px-1 && y >= 0)
	{
		if (arr[x][y] > k)
		{
			y--;;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			*px = x;
			*py = y;
			return 1;
		}
	}
	//找不到
	return 0;

}
int main()
{
	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 7;
	int x = 3;
	int y = 3;
	int ret = Find_arr(arr, k, &y, &y);
	if (ret == 1)
	{
		
		printf("找到了\n");
		printf("下标是:%d %d\n", x, y);
	}
	else
	{
		printf("没找到\n");
	}
	return 0;
}