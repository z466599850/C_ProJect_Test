一、求两个数的最大值： ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
int Max(int x,int y)
{
	if (x > y)
		return x;
	else    //或者 除非 的意思
		return y;

}
int main()
{
   int num1 = 10;
   int num2 = 20;
   int max = 0;
   max = Max(num1, num2);
   printf("max = %d\n", max);
	return 0;
}


第二种写法：

int  main()
{
	int a = 10;
	int b = 20;
	int max = 0;
	max = (a > b ? a : b);
	//三目运算符
	//exp1为真，执行exp2，如果exp1为假则执行exp3
	printf("max = %d\n", max);
	return 0;
}





   简单的写法：
   int main()
{
	int num1 = 10;
	int num2 = 20;
	if (num1 > num2)
		printf("较大值是：%d\n", num1);
	else
		printf("较大值是：%d\n",num2);
	return 0;
}




·下标引用

[ ] { }  . ->

int Add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}

int main()
{
	int arr[10] = { 0 };
	arr[4];// - 下标引用操作符
	int a = 10;
	int b = 20;
	int sum = Add(a,b);// - 函数调用操作符
	printf("sum = %d", sum);
	return 0;
}




列出数字100以内的奇数：！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
第一种写法：
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if (i % 2 == 1)
		printf("%d ", i);
		i++;
	}
	return 0;
}


第二种写法：
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if (i % 2 != 0)
		printf("%d ", i);
		i++;
	}
	return 0;
}



第三种写法：
int main()
{
	int i = 1;
	while (i <= 100)
	{
		printf("%d ", i);
		i += 2;
	}
}


请输入密码：

int main()
{
	int ch = 0;
	int ret = 0;
	char password[20] = { 0 };
	printf("请输入密码：");
	scanf("%s",password);
	while ((ch = getchar()) !='\n')
	{
		;
	}
	printf("请确认(Y/N)：");
	ret = getchar();
	printf("确认成功");
	if (ret == 'Y')
	{
		printf("确认成功");
	}
	else
	{
		printf("放弃确认");
	}


}



计算n的阶梯：

int main()
{
	int i = 0;
	int n = 0;
	scanf("%d", &n);
	int ret = 1;
	for (i = 1; i <= n; i++)
	{
		ret = ret * i;
	}
	printf("ret = %d", ret);
}

2. 计算 1!+2!+3!+......+10!
意思是比如是 3  那就是 1×1+1×2+2×3  1+2+6=9

int main()
{
	int ret = 1;
	int i = 0;
	int n = 0;
	int s = 0;
	for (i = 1; i <= 3; i++)
	{
		ret = ret * i ;
		s = s + ret;
	}
	printf("s = %d", s);
}



第二种 双重循环的写法：
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0;
	// 1 + 2 + 6 = 9
	for (n = 1; n <= 3; n++)
	{
		ret = 1;
		for (i = 1; i <= n; i++)
		{
			ret = ret * i;
		}
		//n的阶乘
		sum = sum + ret;
	}
	//ret  = 1*1 =1
	//ret  = 1*1*2 =2
	//ret  = 1*1*2*3 =6
	printf("sum = %d\n", sum);
	return 0;
}




3.在一个有序数组中查找具体的某个数字n。


int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 3;
	int sz = sizeof(arr) / sizeof(arr[0]);                                 //计算元素个数 40/4=10  //总数组大小/每个元素的大小=数组元素个数”
	int min = 0;                                                          //左边  也就是这里面的最小值
	int max = sz-1;                                                       //右边 -1是因为数组的后面默认有个\0 自动算进去了所以要-1才能正确的等于这个数组
	while (min <= max)                                                   //小于或者等于才能进去 不这样的话 他们就会交叉造成不可逆的伤害
	{
		int mid = (min + max) / 2;                                       //求出mid中间值
		if (arr[mid] > k)                                               //在右边的话 就-1 给max
		{
			max = mid - 1;
		}
		else if (arr[mid] < k)                                         //在左边的话 就+1给min //总结 因为要接近中间值所以才会+1 -1
		{
			min = mid + 1;
		}
		else
		{
			printf("找到了，下标是：%d\n", mid);
			break;
		}

	}
	if (min > max)                                                     //这个时候已经交叉了 所以就是没有找到数值
	{
		printf("找不到\n");
	}
	
}                                                                    // 这种算法叫二分算法  是一个非常好用的一个算法







4.编写代码，演示多个字符从两端移动，向中间汇聚。

#include <Windows.h>
#include <stdlib.h>
int main()
{
	char arr1[] = "welcome to bit!!!!!!";                                  //创建一个数组
	char arr2[] = "####################";                                 //创建一个数组 因为需要覆盖吗
	int min = 0;                                                          //创建一个左边的值
	int max = strlen(arr1) - 1;                                             //创建一个右边的值 strlen是字符串的 strlen 是一个函数，它用来计算指定字符串 str 的长度
	while (min <= max)                                                     //小于等于了他才能进去
	{
		arr2[min] = arr1[min];                                            //下面的要一个一个覆盖 所以就相当于arr1赋值给arr2 所以 arr2 =arr1
		arr2[max] = arr1[max];                                                  //同上
		printf("%s\n", arr2);                                                   //打印字符所以用到%s
		Sleep(1000);                                                                  // 休息一秒的意思  Sleep()里面单位是ms，sleep()里面单位是s，"s"大小写不同，单位也不同 头文件是 #include <Windows.h>
		system("cls");                                                      ////执行系统命令的一个函数- cls - 清空屏幕  头文件是#include <stdlib.h>
		min++;
		max--;
	}
	printf("%s\n", arr2);
	return 0;
}



5.编写代码实现，模拟用户登录情景，并且只能登录三次。 ( 只允许输入三次密码，如提示登录成，如果三次均输入错误，则退出程序。


int main()
{
	int i = 0;
	char password[20] = { 0 };//输入多少密码
	for (i = 0; i < 3; i++)//小于3次不能登录
	{
		printf("输入密码：");
		scanf("%s", password);//字符
		if (strcmp(password, "123456")==0)////字符不能用于相等一个字符串，所以这里不能用scanf 应该使用一个库函数 - strcmp  strcmp用于比较两个字符串并根据比较结果返回整数。基本形式为strcmp(str1,str2)，若str1=str2，则返回零；若str1<str2，则返回负数；若str1>str2，则返回正数
		{
			printf("登陆成功\n");
			break;
		}
		else
		{
			printf("密码错误\n");
		}
	}
	if (i == 3)
		printf("三次密码输入错误，请退出程序\n");
	return 0;
}





写代码将三个数按从大到小输出



int main()
{
	int a = 0;
	int b = 0;
	int c = 0;
	scanf("%d %d %d", &a, &b, &c);
	if (a < b)
	{
		int tmp = a;
		a = b;
		b = tmp;
	}
	if (a < c)
	{
		int tmp = a;
		a = c;
		c = tmp;
	}
	if (b < c)
	{
		int tmp = b;
		b = c;
		c = tmp;
	}

	printf("%d %d %d\n", a, b, c);
	return 0;
}



1到100的3的倍数

int main()
{
	int i = 0;
	for (i = 1; i <= 100; i++)
	{
		if (i % 3 == 0)
			printf("%d ", i);
	}
	return 0;
}


两个数的最大公因数
               a%b=q.....r
			   定理 (a,b)(b,r) 就是括号里的两个数相除 下面是例子
利用辗转相除法  (36,14)(14,8)(8,6)(6,2)
                (a,b)  (b,r)(r,r)(r,r)发现可以除到0了，右边的r就是这两组数的公因数

int main()
{
	int a = 0;
	int b = 0;
	int r = 0;
	scanf("%d%d", &a, &b);
	while (a % b !=0 )
	{
		r = a % b;
		a = b;
		b = r;

	}
	printf("%d\n", b);
	return 0;
}




列出1000年到3000年的闰年
闰年（Leap Year）是为了弥补因人为历法规定造成的年度天数与地球实际公转周期的时间差而设立的。
四年一闰；百年不闰，四百年再闰

第一种写法：
int main()
{
	int year = 0;//year 年
	int count = 0;// count 分组
	for (year = 1000; year <= 3000; year++)
	{
		if (year % 4 == 0 && year % 100 != 0)
		{
			printf("%d ", year);
			count++;
		}
		else if (year % 400 == 0)
		{
			printf("%d ", year);
			count++;
		}
	}
	printf("\ncount = %d\n ", count);
	return 0;
}


第二种写法：

int main()
{
	int count = 0;
	int year = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))   ////else if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) 也可以这样写
		{
			printf("%d ", year);
			count++;
		}
	}
	printf("count = %d\n", count);
	return 0;
}

算出100到200之间的素数

利用试除法

int main()
{
	int i = 0;
	int count = 0;
	for (i = 100; i <= 200; i++)
	{
		int j = 0;
		for (j = 2; j < i; j++)
		{
			if (i % j == 0)
			break;
		}
		if (j == i)
		{
			count++;
			printf("%d ",i);
		}
	}
	printf("\ncount = %d\n ", count);
	return 0;
}


第二种写法： 优化版

#include <math.h>
int main()
{
	int i = 0;
	int count = 0;
	//sqrt - 开平方的数学库函数 头文件是 <math.h>
	for (i = 1; i <= 200; i++)
	{
		//判断i是否为素数
		//素数判断的规则
		//1. 试除法
		//产生2->i-1
		int j = 0;
		for (j = 2; j <= sqrt(i); j++)
		{
			if (i % j == 0)
			{
				break;
			}	
		}
		if (j > sqrt(i))
		{
			count++;
			printf("%d ", i);
		}

	}
	printf("\ncount %d\n", count);
	return 0;
}


1到100之间所有9的数是多少



int main()
{
	int i = 0;
	int count = 0;
	for (i = 1; i <= 100; i++)
	{
		if (i % 10 == 9)
		{
			printf("%d ", i);
			count++;
		}
		if (i / 10 == 9)
		{
			printf("%d ", i);
			count++;
		}
	}
	printf("\ncount = %d\n", count);
	return 0;
}



计算1/1-1/2+1/3-1/4+I/5 ...... + 1/99 - 1/100 的值，打印出结果


int main()
{
	int i = 0;
	double sum = 0;
	//float，单精度浮点型，对应%f。
	//double, 双精度浮点型，对应%lf
	int flag = 1;
	for (i = 1; i <= 100; i++)
	{
		sum += flag*1.0 / i;
		flag = -flag;
		
	}
	printf("%lf", sum);
	return 0;
}



求10个整数中最大值


int main()
{
	int arr[] ={-1,-2,-3,-4,-5,-6,-7,-8,-9,-10};
	int max = arr[0];
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 1; i <= sz; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
	}
	printf("%d", max);
	return 0;
}



打印乘法口诀：


int main()
{
	int a = 0;
	int b = 0;
	for (a = 1; a <= 9; a++)
	{

		for (b = 1; b <= a; b++)
		{
			printf("%d*%d=%-2d ", b, a, a * b);
		}
		printf("\n");
	}
	return 0;
}


猜数字游戏

1.电脑会生成一个随机数
2.然后去猜数字



#define _CRT_SECURE_NO_WARNINGS 1

#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>

void menu()//void 无类型  void的字面意思是“无类型”，void *则为“无类型指针”，void *可以指向任何类型的数据。//menu 菜单
{
	printf("\n**********************************\n");
	printf("*******   1.play    0.exit   *****\n");//play 开始 exit 退出
	printf("**********************************\n");
}

void game()// 无类型 游戏的过程
{
	//第一步1.生成一个随机数
	int ret = 0;
	int guess = 0; //接受猜的数字
	//拿时间戳来设置随机数的生成起始点
	//time_t time(time_t *timer)
	//time_t
	//头文件 #include <time.h>
	
	 ret = rand()%100+1;// int ret = 用来接收他的返回值//rand专门用来生成随机数 范围 0 - RAND_MAX-32767
	                                                  //头文件 #include <stdlib.h> // int rand( void ); void 无类型里面可以不用输入值
	     //任何数%100都是得一个0-99的数，相当于取任何数的后两位，而这里要1-100之间，所以加一
	//printf("%d \n",ret); 这里屏蔽掉是因为已经设置好了 就不需要这个了
	 //第二步 猜数字
	 while (1)
	 {
		 printf("\n请猜数字:>");
		 scanf("%d", &guess);
		 if (guess > ret)
		 {
			 printf("猜大了，马上接近了，加油！\n");
		 }
		 else if (guess < ret)
		 {
			 printf("猜小了，马上接近了，加油！\n");
		 }
		 else
		 {
			 printf("恭喜你，猜对了！\n");
			 break;
		 }
	 }
}

int main()
{

	int input = 0;//input  关键字
	srand((unsigned int)time(NULL));//unsigend 强制类型转换  不想产生什么实际效果的时候就加上NULL
	                               //另外：随机数是依照时间来的，所以重新设置时间的话，时间也会重置， 我输入快的话就会造成重复 
	                              //所以执行一次就好，就不会重复，****如果放到循环里面他就会有重复的  这样输入多快都不会重复
	do//至少执行一次
	{
		menu();//菜单函数
		printf("请输入>:");//进入游戏
		scanf("%d", &input);//用scanf输入数字
		switch (input)
		{
		case 1:
			game();//玩游戏的过程
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("输入错误\n");
			break;
		}
	} while (input);//继续循环
	return 0;
}



关机程序

int main()
{
	char input[20] = { 0 };
	//shutdown -s -t 60  -s设置电脑关机 -t 设置关机的时间
	//system() 执行系统命令的 头文件是 #include <stdlib.h>
	system("shutdown -s -t 60");
again:
	printf("请注意，你的电脑将在1分钟内关机，如果输入：我是猪，就取消关机\n请输入>:");
	scanf("%s", input);
	if (strcmp(input, "我是猪") == 0)//比较两个字符串-strcmp() 头文件是#include <string.h>
	{
		system("shutdown -a");
	}
	else
	{
		goto again;
	}
	return 0;
}


另一种循环的写法：

int main()
{
	char input[20] = { 0 };
	//shutdown -s -t 60  -s设置电脑关机 -t 设置关机的时间
	//system() 执行系统命令的 头文件是 #include <stdlib.h>
	system("shutdown -s -t 60");
	while (1)
	{
		printf("请注意，你的电脑将在1分钟内关机，如果输入：我是猪，就取消关机\n请输入>:");
		scanf("%s", input);
		if (strcmp(input, "我是猪") == 0)//比较两个字符串-strcmp() 头文件是#include <string.h>
		{
			system("shutdown -a");
			break;
		}
		return 0;
	}

}





//写一个函数可以判断一个数是不是素数
int is_prime(int a)
{
	int j = 0;
	for (j = 2; j < a; j++)
	{
		if (a % j == 0)
		{
			return 0;
		}
	}
	return 1;
}

int main()
{
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)
			printf("%d ", i);
	}
	return 0;
}


优化版
//写一个函数可以判断一个数是不是素数
int is_prime(int a)
{
	int j = 0;
	for (j = 2; j <=sqrt(a); j++)//sqrt 开根号的意思 头文件是math.h
	{
		if (a % j == 0)
		{
			return 0;
		}
	}
	return 1;
}

int main()
{
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)//is_prime 判断是不是素数
			printf("%d ", i);
	}
	return 0;
}



//.写一个函数判断一年是不是闺年。
int is_leap_year(int y)
{
	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
	{
		return 1;
	}
	else
	{
		return 0;
	}

}

int main()
{
	int year = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if (is_leap_year(year) == 1)//is_leap_year 是不是闰年的意思
		{
			printf("%d ", year);
		}
	}
	return 0;
}





//3.写一个函数，实现一个整形有序数组的二分查找。
int binary_serch(int arr[], int k,int sz)
{

	int min = 0;
	int max = sz - 1;
	while (min <= max)
	{
		int mid = (min + max)/2;
		if (arr[mid]< k )
		{
			min = mid + 1;
		}
		else if (arr[mid] > k)
		{
			max = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;

}


int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret = binary_serch(arr, k,sz);
	if (ret == -1)
	{
		printf("找不到指定的数字");
	}
	else
	{
		printf("找到了，下标是%d",ret);
	}
	return 0;
}




//.写一个函数，每调用一次这个函数，就会将num的值增加1。
void Add(int* p)
{
	(*p)++;
}

int main()
{
	int num = 0;
	Add(&num);
	printf("num = %d\n",num);
	Add(&num);
	printf("num = %d\n",num);
	Add(&num);
	printf("num = %d\n",num);
	return 0;
}







