程序环境和预处理

本章重点：
    · 程序的翻译环境
    · 程序的执行环境
    · 详解:C语言程序的编译+链接
    · 预定义符号介绍
    · 预处理指令 #define  另：#define 定义一个符号 #define MAX 100
    · 宏和函数的对比
    · 预处理操作符#和##的介绍
    · 命令定义
    · 预处理指令 #include
    · 预处理指令 #undef
    · 条件编译


正文开始

    程序的翻译环境和执行环境

    在ANSI C的任何一种实现中，存在两个不同的环境
        第1种是翻译环境，在这个环境中源代码被转换为可执行的机器指令。 第2种是执行环境，它用于实际执行代
        码。

    详解编译+链接

    翻译环境

        源文件      编译器      ()目标文件
        源文件      编译器      ()目标文件
        源文件      编译器      ()目标文件
        链接库      链接器    <- |
        -            | |
        -         可执行程序

        · 组成一个程序的每个源文件通过编译过程分别转换成目标代码(obiect code)。
        · 每个目标文件由链接器(linker )捆绑在一起，形成一个单一而完整的可执行程序。
        · 链接器同时也会引入标准C函数库中任何被该程序所用到的函数，而且它可以搜索程序员个人的程序库

    编译本身也分为几个阶段 :
    看代码:
    add.c
        int Add(int x, int y)
        {
            return x + y;
        }


    test.c
        extern int Add(int x, int y);//extern 声明一下来自外部文件的函数想在这里使用先声明一下

        int main()
        {
            int a = 10;
            int b = 20;
            int c = Add(a, b);
            printf("c = %d\n", c);
            int arr[10] = { 0 };
            int i = 0;
            for (i = 0; i < 10; i++)
            {
                arr[i] = i;
            }
            for (i = 0; i < 10; i++)
            {
                printf("%d ", arr[i]);
            }
            return 0;
        }



    test.c                              test.exe
    [           编译环境            ]  [运行环境]
    [编译(编译器)      ][链接(链接器)]
-      1      2    3    目标文件
    [预编译][编译] ([汇编]) ->        |        可执行程序
-                               1.合并段表
-                               2.符号表的合并和重定位
-                               Add 0x100
-                               main 0x200

           test.c   test.i ->           test.s .S文件放的汇编代码
-                                          |
Linux gcc -E test.c                 gcc -S test.i                   gcc -c test.s
-       预编译/预处理                把c语言代码                      把汇编代码
-        1.#include                 翻译成汇编代码                    转换成了
-        头文件的包含                                                 二进制指令
-        2.注释删除                 1.语法分析
-        使用空格开替换注释          2.词法分析
-        3. #define                 3.语义分析
-                                   4.符号汇总

-       文本操作                      main
-                                   g_val
-                                   函数名  
-                                   全局变量
-                       一本书《编译原理》 《程序员的自我修养》




[    test.c  预编译阶段(*.i) |编译(*.s )  |汇编(生成可重定位目标文件*.o)         |链接
-           预处理指令      |语法分析    |形成符号表                            |1.合并段表2.符号表的合并
-                          |词法分析    |汇编指令->二进制指令----->test.o       |2.符号表的合并和符号表的重定位
-                          |语义分析    |                                      | 
-                          |符号汇总    |                                      | 
-                          | ----------|--------------------------------------|--------------------------------------
-       sum.c              | ....       |                   ------->sum.o     |
    隔离编译，一起链接
]    



    1.预处理 选项 gcc -E test,co test. 预处理完成之后就停下来，预处理之后产生的结果都放在test.i文件
    中。
    2.编译选项gcc-stestc编译完成之后就停下来，结果保存在test.s中
    3.汇编gcc-ctestc汇编完成之后就停下来，结果保存在test.o中。

    简明VIM练级攻略
        https://coolshell.cn/articles/5426.html
    给程序员的VIM速查卡
        https://coolshell.cn/articles/5479.html




    运行环境
        程序执行的过程:

            1.程序必须载入内存中。在有操作系统的环境中:一般这个由操作系统完成。在独立的环境中，程序的载入必须
            由手工安排，也可能是通过可执行代码置入只读内存来完成。
            2.程序的执行便开始。接着便调用main函数。
            3.开始执行程序代码。这个时候程序将使用一个运行时堆(stack)，存储函数的局部变量和返回地址。程序同
            时也可以使用静态( static)内存，存储于静态内存中的变量在程序的整个执行过程一直保留他们的值
            4.终止程序。正常终止main函数;也有可能是意外终止。
        注:介绍一本书《程序员的自我修养》









    预处理详解

    预定义符号

    __FILE__    //进行编译的源文件
    __LINE__    //文件当前的行号
    __DATE__    //文件被编译的日期
    __TIME__    //文件被编译的时间
    __STDC__    //如果编译器遵循ANSI C，其值为1，否则未定义

    这些预定义符号都是语言内置的。 举个例子:
        int main()
        {
            //printf("%s\n", __FILE__);//代码所在的原名称和路径
            //printf("%d\n", __LINE__);//代码所在的行号
            //printf("%s\n", __DATE__);//当前代码运行的日期
            //printf("%s\n", __TIME__);//当前代码运行的时间

            //写日志文件
            int i = 0;
            int arr[10] = { 0 };
            FILE* pf = fopen("log.txt", "w");
            for (i = 0; i < 10; i++)
            {
                arr[i] = i;
                fprintf(pf, "file:%s lin:%d date:%s time:%s i:%d\n", __FILE__, __LINE__, __DATE__, __TIME__, i);
                printf("%s\n", __FUNCTION__);//所在的函数的名字
            }
            for (i = 0; i < 10; i++)
            {
                printf("%d ", arr[i]);
            }
            fclose(pf);
            pf = NULL;
            return 0;
        }


        //95% - VS
        //99% - gcc

        int main()
        {
            printf("%d\n", __STDC__);//在VS不可以 在LINUX gcc编译器下可以
            return 0;
        }









        #define
        #define 定义标识符
        语法: #define name stuff

        举个例子：
            #define MAX 100//#开头的都是预处理指令
            #define STR "hehe"//#define 名字 内容
            #define reg register
            #define do_forever for(;;)
            int main()
            {
                do_forever;
                //reg int a;
                //register int a;
                //int max = MAX;//在预编译/预处理的时候就把这个max换成了100
                //printf("%d\n", max);
                //printf("%s\n", STR);
                return 0;
            }

        #define MAX 1000
        #define reg register          //为 register这个关键字，创建一个简短的名字
        #define do_forever for(;;)     //用更形象的符号来替换一种实现
        #define CASE break;case        //在写case语句的时候自动把 break写上。
        // 如果定义的 stuff过长，可以分成几行写，除了最后一行外，每行的后面都加一个反斜杠(续行符)。
        #define DEBUG_PRINT printf("file:%s\tline:%d\t \
                                date:%s\ttime:%s\n" ,\
        __FILE__,__LINE__ ,       \
        __DATE__,__TIME__ )








    提问 :
        在define定义标识符的时候，要不要在最后加上;?
    比如:
    
    #define MAX 100;

    int main()
    {
        int a = MAX;
        printf("%d\n", MAX;);//就会出错误 所以不能加分号
        return 0;
    }

    建议不要加上;,这样容易导致问题,这里会出现语法错误。




    #define定义宏
        #define 机制包括了一个规定，允许把参数替换到文本中，这种实现通常称为宏(macro)或定义宏( define
        macro).

        下面是宏的申明方式
            /*define MAX 100;

            int main()
            {
                int a = MAX;
                printf("%d\n", MAX;);//就会出错误 所以不能加分号
                return 0;
            }*/


    代码2:

        /*#define SQUARE(X) (X)*(X)//这个时候就是36了 不加括号的时候是11

        int main()
        {
            //int ret = SQUARE(5);//宏是完成替换的
            //int ret = 5 * 5;
            int ret = SQUARE(5 + 1);//5 + 1 5+1*5+1 = 11 他是替换
            printf("%d\n", ret);
            return 0;
        }*/

    代码3：
        #define DOUBLE(X) ((X)*(X))

        int main()
        {
            int a = 5;
            int ret = 10 * DOUBLE(a);
            //int ret = 10* ((a)+(a));
            printf("%d\n", ret);
            return 0;
        }

    代码4：
        #define MAX 100
        #define DOUBLE(X) ((X)*(X))

        int main()
        {
            int a = 5;
            int ret = 10 * DOUBLE(MAX+MAX);//先替换第一个 在替换第二个MAX
            //int ret = 10* ((a)+(a));
            printf("%d\n", ret);
            return 0;
        }

    提示:
    所以用于对数值表达式进行求值的宏定义都应该用这种方式加上括号，避免在使用宏时由于参数中的操作符或
    邻近操作符之间不可预料的相互作用

    #define 替换规则

    在程序中扩展#define定义符号和宏时，需要涉及几个步骤

        1.在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号。如果是，它们首先被替换。
        2.替换文本随后被插入到程序中原来文本的位置。对于宏，参数名被他们的值替换。
        3.最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号。如果是，就重复上述处理过程
    注意:
        1.宏参数和#define 定义中可以出现其他#define定义的变量。但是对于宏，不能出现递归.
        2.当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索。






    #和##

        如何把参数插入到字符串中 ?

        # 的使用

        #define PRINT(X) printf("the value of "#X" is %d\n",X)//#号 把一个宏参数变成对应的字符串

        int main()
        {
            //printf("hello world\n");
            //printf("hello" "wrold\n");
            //printf("hel""lo""world\n");

            int a = 10;
            int b = 20;
            PRINT(a);
            //printf("the value of ""a""is %d\n");
            PRINT(b);
            //printf("the value of ""b""is %d\n");
            return 0;
        }


    ##的使用
        #define CAT(X,Y) X##Y

        int main()
        {
            int Class84 = 2019;
            //printf("%d\n",Class84);
            printf("%d\n", CAT(Class, 84));
            //printf("%d\n",Class##84);
            //printf("%d\n",Class84);//所以是2019
            //把他们俩合并了
            return 0;
        }

    注:这样的连接必须产生一个合法的标识符。否则其结果就是未定义的



    带副作用的宏参数

    当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么你在使用这个宏的时候就可能出
    致不可预测的后果。副作用就是表达式求值的时候出现的永久性效果。 例如:

    x+1;//不带副作用
    x++;//带有副作用

    MAX宏可以证明具有副作用的参数所引起的问题

    #define MAX(X,Y) ((X)>(Y)?(X):(Y))

    int main()
    {
        int a = 10;
        int b = 11;

        int max = MAX(a++, b++);
        //是直接替换过去
        //int max = ((a++)>(b++)?(a++):(b++));
        printf("%d\n", max);//12
        printf("%d\n", a);//11
        printf("%d\n", b);//13

        return 0;
    }




    函数和宏哪个好用？

        //函数
        int Max(int x, int y)
        {
            return x > y ? x : y;
        }

        //宏
        #define MAX(X,Y) ((X)>(Y)?(X):(Y))

        int main()
        {
            int a = 10;
            int b = 11;
            float c = 3.0f;
            float d = 4.0f;
            //函数在调用的时候
            //回头函数带哦用和返回的开销
            //
            float max = MAX2(c, d);
            printf("max = %d\n", max);
            //预处理阶段就完成了替换
            //没有函数的调用和返回的开销
            max = MAX(c, d);
            max = (c) > (d) ? (c) : (d);
            printf("max = %d\n", max);

            //int max = Max(a, b);
            //printf("Max = %d\n",max);
            //max = MAX(a, b);
            //printf("MAX = %d\n", max);

            //int max = MAX(a++, b++);
            //是直接替换过去
            //int max = ((a++)>(b++)?(a++):(b++));
            //printf("%d\n", max);//12
            //printf("%d\n", a);//11
            //printf("%d\n", b);//13

            return 0;
        }


    那为什么不用函数来完成这个任务？原因有二：

        1.用于调用函数和从函数返回的代码可能比实际执行这个小型计算工作所需要的时间更多。所以宏比函数在程序
        的规模和速度方面更胜一筹。

        2.更为重要的是函数的参数必须声明为特定的类型。所以函数只能在类型合适的表达式上使用。反之这个宏怎可
        以适用于整形、长整型、浮点型等可以用于>来比较的类型。宏是类型无关的。

    当然和宏相比函数也有劣势的地方:
        1.每次使用宏的时候，一份宏定义的代码将插入到程序中。除非宏比较短，否则可能大幅度增加程序的长度.
        2.宏是没法调试的。
        3.宏由于类型无关，也就不够严谨。
        4.宏可能会带来运算符优先级的问题，导致程容易出现错

    宏有时候可以做函数做不到的事情。比如:宏的参数可以出现类型，但是函数做不到。

        #define SIZEOF(TYPE) sizeof(TYPE)

        int main()
        {
            int ret = SIZEOF(int);
            //int ret = sizeof(int);
            printf("%d\n", ret);
            return 0;
        }

        代码2：
        #define MALLOC(num,type) (type*)malloc(num*sizeof(type))

        int main()
        {
            int* p = (int*)malloc(10 * sizeof(int));

            int* p = MALLOC(10, int);
            //也会被替换成
            //int* p = (int*)malloc(10 * sizeof(int));
            return 0;
        }

        ___________________________________________________________________________________________________
        | 属性    #define定义宏                                            函数
        | 代      每次使用时，宏代码都会被插入到程序中。除了非常小的宏        函数代码只出现于一个地方，每次使
        | 码      之外，程序的长度会大幅度增长                              用这个函数时，都调用那个地方的同
        | 长                                                              一份代码
        | 度
        | ————————————————————————————————————————————————————————————————————————————————————————————————————
        | 执
        | 行       更快                                                   存在函数的调用和返回的额外开销
        | 速                                                              所以相对慢一些
        | 度
        | ————————————————————————————————————————————————————————————————————————————————————————————————————
        | 操
        | 作      宏参数的求值是在所有周围表达式的上下文环境里，除非加        函数参数只在函数调用的时候求值一
        | 符      上括号，否则邻近操作符的优先级可能会产生不可预料的后        次，它的结果值传递给函数。表达式
        | 优      产生不可预料的后果                                        的求值结果更容易预测
        | 先
        | ————————————————————————————————————————————————————————————————————————————————————————————————————
        | 带
        | 有
        | 副
        | 作      参数可能被替换到宏体中的多个位置，所以带有副作用的参        函数参数只在传参的时候求值一次
        | 用      数求值可能会产生不可预料的结果。                            ，结果更容易控制。
        | 的
        | 宏
        | 参
        | 数
        | ————————————————————————————————————————————————————————————————————————————————————————————————————
        | 参                                                               函数的参数是与类型有关的，如果参
        | 数      宏的参数与类型无关，只要对参数的操作是合法的，它就可        数的类型不同，就需要不同的函数
        | 类      以使用于任何参数类型。                                    即使他们执行的任务是不同的。
        | 型
        | ————————————————————————————————————————————————————————————————————————————————————————————————————
        | 调                                                                                                  
        | 试      宏是不方便调试的                                            函数是可以逐语句调试的             
        | ————————————————————————————————————————————————————————————————————————————————————————————————————
        | 递
        | 归      宏是不能递归的                                              函数是可以递归的
        |_____________________________________________________________________________________________________|

    命名约定
    一般来讲函数的宏的使用语法很相似。所以语言本身没法帮我们区分二者。那我们平时的一个习惯是

        把宏名全部大写函数名不要全部大写



    #undef

    这条指令用于移除一个宏定义

        #undef NAME
        //如果现存的一个名字需要被重新定义，那么它的旧名字首先要被移除。

    例如：
        #define MAX 100

        int main()
        {
            printf("MAX = %d\n", MAX);
        #undef MAX
            printf("MAX = %d\n", MAX);
            return 0;
        }





    命令行定义

        许多C 的编译器提供了一种能力，允许在命令行中定义符号。用于启动编译过程。
        例如：当我们根据同一个源文件要编译出不同的一个程序的不同版本的时候，这个特性有点用处。（假
        定某个程序中声明了一个某个长度的数组，如果机器内存有限，我们需要一个很小的数组，但是另外一
        个机器内存大写，我们需要一个数组能够大写。）

        在Linux

            #include <stdio.h>
            int main()
            {
                int array [ARRAY_SIZE];
                int i = 0;
                for(i = 0; i< ARRAY_SIZE; i ++)
            {
                    array[i] = i;
            }
                for(i = 0; i< ARRAY_SIZE; i ++)
            {
                    printf("%d " ,array[i]);
            }
                printf("\n" );
                return 0;
            }



        编译指令：
            gcc -D ARRAY_SIZE=10 programe.c


    条件编译
        在编译一个程序的时候我们如果要将一条语句（一组语句）编译或者放弃是很方便的。因为我们有条件
        编译指令。

        比如说：
        调试性的代码，删除可惜，保留又碍事，所以我们可以选择性的编译。

            #define DEBUG

            int main()
            {
                int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };
                int i = 0;
                for (i = 0; i < 10; i++)
                {
                    arr[i] = 0;
            #ifdef DEBUG//如果定义过就参与编译 没有定义过就不参与编译
                    printf("%d ", arr[i]);
            #endif//这是一对
                }

                return 0;
            }



        常见的条件编译指令：
            1.
            #if 常量表达式
                //...
            #endif
            //常量表达式由预处理器求值。
            如：
            #define __DEBUG__ 1
            #if __DEBUG__
                //..
            #endif
        代码：
            int main()
            {
                int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };
                int i = 0;
                for (i = 0; i < 10; i++)
                {
                    arr[i] = 0;
            #if 1//if 表达式后面的数字 如果为真就执行下面的代码 为假就不执行
                    printf("%d ", arr[i]);
            #endif//这是一对
                }

                return 0;
            }





            2.多个分支的条件编译
            #if 常量表达式
                //...
            #elif 常量表达式
                //...
            #else
                //...
            #endif

        代码：
            int main()
            {
            #if 1==1
                printf("haha\n");
            #elif 2==1
                printf("hehe\n");
            #else
                printf("嘿嘿\n");
            #endif
                return 0;
            }





            3.判断是否被定义
            #if defined(symbol)
            #ifdef symbol

            #if !defined(symbol)
            #ifndef symbol

        代码：
            int main()
            {
                //代码1：
            //#if defined(DEBUG)//定义了就执行下面代码 没定义就没有
            //	printf("hehe\n");
            //#endif
                //代码2： 代码2等价于代码1
            #ifdef DEBUG
                printf("hehe\n");
            #endif
                //代码3： 相反的逻辑
            #if !defined(DEBUG)//定义了就不执行 没定义就执行
                printf("hehe\n");
            #endif
                //代码4：
            #ifndef DEBUG//#if not def 多加个n
                printf("hehe\n");
            #endif
                return 0;
            }



            4.嵌套指令
            #if defined(OS_UNIX)
                #ifdef OPTION1
                    unix_version_option1();
                #endif
            #ifdef OPTION2
                    unix_version_option2();
                #endif
            #elif defined(OS_MSDOS)
                #ifdef OPTION2
                    msdos_version_option2();
                #endif
            #endif








    文件包含

    我们已经知道，#include 指令可以使另外一个文件被编译。就像它实际出现于 #include 指令的地方一样.
    这种替换的方式很简单:预处理器先删除这条指令，并用包含文件的内容替换。 这样一个源文件被包含10次，那就
    实际被编译10次。




    头文件被包含的方式:

         本地文件包含

       #include "filename"

        查找策略：先在源文件所在目录下查找，如果该头文件未找到，编译器就像查找库函数头文件一样在标
        准位置查找头文件。
        如果找不到就提示编译错误。

        Linux环境的标准头文件的路径：
            /usr/include
        
        VS环境的标准头文件的路径：
        C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include
        注意按照自己的安装路径去找

            库文件包含
            #include <filename.h>

            查找头文件直接去标准路径下去查找，如果找不到就提示编译错误。

            这样是不是可以说，对于库文件也可以使用 “” 的形式包含？
            答案是肯定的，可以

            但是这样做查找的效率就低些，当然这样也不容易区分是库文件还是本地文件了。





        嵌套文件包含
            意思是在一个文件中多次包含同一个头文件
            这样最终程序中就会出现两份comm.h的内容。这样就造成了文件内容的重复。

            如何解决这个问题？
            答案：条件编译。
            每个头文件的开头写：

            #ifndef __TEST_H__
            #define __TEST_H__
            //头文件的内容
            #endif   //__TEST_H__

            或者：


            #pragma once  这种写法是现在流行的

            就可以避免头文件的重复引入。




            注：
                推荐《高质量C/C++编程指南》中附录的考试试卷（很重要）。
                笔试题：
                1. 头文件中的 ifndef/define/endif是干什么用的?.     防止头文件被多次包含
                2. #include <filename.h> 和 #include "filename.h"有什么区别?



        我们讲的是 预处理阶段
-                   预处理指令
-                   #开头的都是预处理指令
-                   1.条件编译指令 2.#include 3.#define 


其他预处理指令



            #pragma once
            #pragma pack()

        #error
        #pragma
        #line
        ...
        不做介绍，自己去了解。
        #pragma pack()在结构体部分介绍。



        参考《C语言深度解剖》学习


        本章完



   另： 2. 请编写宏，计算结构体中某变量相对于首地址的偏，并给出说明。(8 分)

        #include <stddef.h>

        struct S
        {
            char c1;
            int a;
            char c2;
        };

        #define OFFSETOF(struct_name,member_name) (int)&(((struct_name*)0)->member_name)

        int main()
        {
            //struct S s;	//模拟实现offsetof
            printf("%d\n", OFFSETOF(struct S, c1));
            printf("%d\n", OFFSETOF(struct S, a));
            printf("%d\n", OFFSETOF(struct S, c2));
            //offsetof 需要引头文件#include <stddef.h>
            return 0;
        }
