本章重点
    · 为什么存在动态内存分配
    · 动态内存函数的介绍
        malloc
        free
        calloc
        realloc
    · 常见的动态内存错误
    · 几个经典的笔试题
    · 柔性数组

    正文开始



    为什么存在动态内存分配

    当前我们知道的内存使用方式：
    1.创建一个变量
    int a = 10;//局部变量 - 栈区
    int g_a = 10;//全局变量 - 静态区



        栈区{
                局部变量
                函数的形式参数
            }

        堆区{
                动态内存分配
            }

       静态区{
                全局变量
                静态变量
                statint int a = 10;   
            }


        我们已经掌握的内存开辟方式有：

            int va1 = 20;//在栈空间上开辟四个字节
            char arr[10] = {o};//在栈空间上开辟10个字节的连续空间

        但是上述的开辟空间的方式有两个特点

            1.空间开辟大小是固定的。
            2.数组在申明的时候，必须指定数组的长度，它所需要的内存在编译时分配。

        但是对于空间的需求，不仅仅是上述的情况。有时候我们需要的空间大小在程序运行的时候才能知道，那数组的编
        译时开辟空间的方式就不能满足了。 这时候就只能试试动态存开辟了




        动态内存函数的介绍

        malloc和free

        C语言提供了一个动态内存开辟的函数

            void* malloc (size_t size);

        这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针
            · 如果开辟成功，则返回一个指向开辟好空间的指针。
            · 如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。
            · 返回值的类型是 void*，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。
            · 如果参数 size 为0，malloc的行为是标准是未定义的，取决于编译器。

        C语言提供了另外一个函数free，专门是用来做动态内存的释放和回收的，函数原型如下:

            void free (void* ptr);

        free函数用来释放动态开辟的内存
            · 如果参数 tr 指向的空间不是动态开辟的，那free函数的行为是未定义的
            · 如果参数 ptr 是NULL指针，则函数什么事都不做。

        malloc和free都声明在 stdlib.h 头文件中。举个例子
        
            #include <stdlib.h>
            #include <errno.h>
            int main()
            {
                //向内存申请10个整形的空间
                int* p = (int*)malloc(10 * sizeof(int));//需要强制类型转换 
                //引用头文件#include <stdlib.h> malloc(开辟多少空间 * sizeof(类型))
                                                        //prt = (int*)malloc(num*sizeof(int));
                if (p == NULL)//判断ptr指针是否为空
                {
                    //打印错误原因的一个方式
                    printf("%s\n", strerror(errno));//可以把对应的错误码显示出来
                }
                else
                {
                    //正常使用空间
                    int i = 0;
                    for (i = 0; i < 10; i++)
                    {
                        *(p + i) = i;
                    }
                    for (i = 0; i < 10 ; i++)
                    {
                        printf("%d ", *(p + i));
                    }
                }
                //当动态申请的空间不再使用的时候
                //就应该还给操作系统

                free(p);//free(内存块的名)释放空间 虽然释放了但还是会找到这块空间
                p = NULL;//加上这个就可以彻底断开他的联系

                //注：malloc 和 free 一定要成对使用 

                return 0;
            }









        calloc

        C语言还提供了一个函数叫 ca1]oc ，ca11oc 函数也用来动态内存分配。原型如下

            void* ca11oc (size_t num, size_t size);
            
            · 函数的功能是为 num 个大小为 size 的元素开辟一块空间，并且把空间的每个字节初始化为0。
            · 与函数 ma1oc 的区别只在于 al1c 会在返回地址之前把申请的空间的每个字节初始化为全0。举个例子:


                int main()
                {
                    // calloc想初始化用calloc开辟好之后初始化之后返回来 
                    // malooc不想初始化用 malloc 不初始化效率更高一些 开辟好就返回来了
                    //malloc(10*sizeof(int))
                    int* p = (int*)calloc(10, sizeof(int));//calloc(几个元素，元素几个字节);
                    if (p == NULL)
                    {
                        printf("%s\n", strerror(errno));
                    }
                    else
                    {
                        int i = 0;
                        for (i = 0; i < 10; i++)
                        {
                            printf("%d", *(p + i));
                        }
                    }
                    //释放空间
                    //free函数是用来释放动态开辟的空间的
                    free(p);
                    p = NULL;
                    return 0;
                }


            注：  calloc想初始化用calloc开辟好之后初始化之后返回来 
                  malooc不想初始化用 malloc 不初始化效率更高一些 开辟好就返回来了



        realloc
            · realloc函数的出现让动态内存管理更加灵活。
            · 有时会我们发现过去申请的空间太小了，有时候我们又会觉得申请的空间过大了，那为了合理的时候内存
              我们一定会对内存的大小做灵活的调整。那 rea11oc 函数就可以做到对动态开辟内存大小的调整。函数原型
            如下:

                void* realloc (void* ptr, size_t size);

                · ptr 是要调整的内存地址
                · size 调整之后新大小
                · 返回值为调整之后的内存起始位置
                · 这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到 新 的空间
                · realloc在调整内存空间的是存在两种情况:
                第一种情况：原有空间之后有足够大的空间
                第二种情况：原有空间之后没有足够大的空间



                int main()
                {
                    int* p = (int*)malloc(20);
                    if (p == NULL)
                    {
                        printf("%s\n", strerror(errno));
                    }
                    else
                    {
                        int i = 0;
                        for (i = 0; i < 5; i++)
                        {
                            *(p + i) = i;
                        }
                    }
                    //就是在使用malloc开辟的20个字节空间
                    //假设这里，20个字节不能满足我们的使用要求了
                    //希望我们能够又40个字节的空间
                    //这里就可以使用realloc来调整动态开辟的内存
                    //realloc使用的注意事项：
                    //1.如果p指向的空间之后有足够的内存空间可以追加，则直接追加，后返回p
                    //2.如果p指向的空间之后没有足够的内存空间可以追加，则realloc函数会重新找一块新的内存区域
                    //  开辟一块满足需求的空间，并且把原来内存的数据拷贝回来，释放原旧的内存空间，最后返回新
                    //  开辟的内存空间地址
                    //3.得用一个新的变量来接受realloc函数的返回值
                    int* ptr = realloc(p, 400);//开辟空间
                    if (ptr != NULL)//开辟成功赋值给p
                    {
                        p = ptr;
                        int i = 0;

                        for (i = 5; i < 10; i++)
                        {
                            *(p + i) = i;
                        }

                        for (i = 0; i < 10; i++)
                        {
                            printf("%d ", *(p + i));
                        }
                    }
                    //释放内存
                    free(p);
                    p = NULL;
                    return 0;
                }









        常见的动态内存错误

            · 对NULL指针的解引用操作

            代码1：

                int main()
                {
                    //对NULL的解引用
                    int* p = malloc(40);
                    ////万一malloc失败了，p就被赋值为NULL
                    *p = 0;//err
                    int i = 0;
                    for (i = 0; i < 10; i++)
                    {
                        *(p + i) = i;//err
                    }
                    return 0;
                }

            代码2：
                2，对动态开辟的内存的越界访问

                int main()
                {
                    int* p = malloc(5 * sizeof(int));
                    if (p == NULL)
                    {
                        return 0;
                    }
                    else
                    {
                        int i = 0;
                        for (i = 0; i < 10; i++)
                        {
                            *(p + i) = i;
                        }
                    }
                    //释放
                    free(p);
                    p = NULL;
                    return 0;
                }



            代码3：
                对非动态开辟内存使用free释放



                int main()
                {
                    int a = 10;
                    int* p = &a;
                    *p = 20;
                    //3.对非动态开辟内存的free
                    free(p);
                    p = NULL;
                    return 0;
                }



        全部的代码：

            int main()
            {
                //1.对NULL指针解引用操作
                //int* p = malloc(40);
                ////怎么破解这把办法呢 ：对p进行相关的判断
                //*p = 10;//malloc开辟空间失败 - 对NULL指针解引用

                //2.对动态开辟内存的越界访问
                //int* p = malloc(40);//10个int
                //if (p == NULL)
                //{
                //	return 0;
                //}
                //else
                //{
                //	int i = 0;
                //	for (i = 0; i <= 10; i++)
                //	{
                //		*(p + i) = i;
                //	}
                //}
                //free(p);
                //p = NULL;

                //3.对非动态开辟内存使用free释放内存空间
                //int a = 10;
                //int* p = &a;
                //p = 10;
                ////...
                // 对非动态开辟内存使用free释放内存空间
                //free(p);
                //p = NULL;
                //

                //4. 使用free释放动态开辟内存的一部分
                //int* p = (int*)malloc(40);
                //if (p == NULL)
                //{
                //	return 0;
                //}
                //int i = 0;
                //for (i = 0; i < 5; i++)
                //{
                //	*p++ = i;
                //}
                ////回收空间
                ////使用free释放动态开辟内存的一部分
                ////为什么呢 因为p++的起始位置已经被改变了 p不变让free释放是可以的
                //free(p);
                //p = NULL;

                //5.对同一块动态内存多次释放
                //int* p = (int*)malloc(40);
                //if (p == NULL)
                //{
                //	return 0;
                //}
                ////假设使用完了
                ////释放
                //free(p);
                //p = NULL;//加上这句话后面的free就没有意义了
                ////....
                //free(p);

                //6.动态开辟内存忘记释放(内存泄露)

                while (1)
                {
                    malloc(1);//这就会疯狂开辟内存 很可怕的一件事 会把内存耗干

                }
                return 0;
            }


        忘记释放不再使用的动态开辟的空间会造成内存泄漏。切记: 动态开辟的空间一定要释放，并且正确释放。







        几个经典的笔试题

            题目1:

            //改正2
            char* GetMemory(char* p)
            {
                p = (char*)malloc(100);
                return p;
            }

            void Test(void)
            {
                char* str = NULL;
                str = GetMemory(str);
                strcpy(str, "hello word");
                printf(str);

                free(str);
                str = NULL;
            }

            int main()
            {
                //问 结果是什么
                //1.运行代码程序会出现程序崩溃的现象
                //2.程序存在内存泄露
                //为什么会存在内存泄漏呢：str以值传递的形式给p
                //p是GetMemory函数的形参，只能函数内部有效
                //等GetMemory函数返回之后，动态开辟内存尚未释放
                //并且无法找到，所以会造成内存泄漏
                Test();

                //char* str = "abcdef";
                //printf("%s\n", str);
                //printf(str);
                //printf("abcdef");
                return 0;
            }
            //改成正确的1
            void GetMemory(char** p)
            {
                *p = (char*)malloc(100);
            }

            void Test(void)
            {
                char* str = NULL;
                GetMemory(&str);
                strcpy(str, "hello word");
                printf(str);

                free(str);
                str = NULL;
            }

            int main()
            {
                //问 结果是什么
                //1.运行代码程序会出现程序崩溃的现象
                //2.程序存在内存泄露
                //为什么会存在内存泄漏呢：str以值传递的形式给p
                //p是GetMemory函数的形参，只能函数内部有效
                //等GetMemory函数返回之后，动态开辟内存尚未释放
                //并且无法找到，所以会造成内存泄漏
                Test();

                //char* str = "abcdef";
                //printf("%s\n", str);
                //printf(str);
                //printf("abcdef");
                return 0;
            }


            //题目1：
            void GetMemory(char* p)
            {
                p = (char*)malloc(100);
            }

            void Test(void)
            {
                char* str = NULL;
                GetMemory(str);
                strcpy(str, "hello word");
                printf(str);
            }

            int main()
            {
                //问 结果是什么
                //1.运行代码程序会出现程序崩溃的现象
                //2.程序存在内存泄露
                //为什么会存在内存泄漏呢：str以值传递的形式给p
                //p是GetMemory函数的形参，只能函数内部有效
                //等GetMemory函数返回之后，动态开辟内存尚未释放
                //并且无法找到，所以会造成内存泄漏
                Test();

                //char* str = "abcdef";
                //printf("%s\n", str);
                //printf(str);
                //printf("abcdef");
                return 0;
            }




            请问运行Test 函数会有什么样的结果?



            题目2：

                int* Test()
                {
                    int* ptr = malloc(100);//堆区 堆区free才能回收
                    return ptr;
                }

                int main()
                {
                    int* Test();
                    return 0;
                }

                int* Test()
                {
                    //static int a = 10;//静态区
                    int a = 10;//栈区err
                    return &a;
                }

                int main()
                {
                    int* p =Test()
                    return 0;
                }

                //返回栈空间地址的问题
                char* GetMemory(void)
                {
                    char p[] = "hello world";
                    return p;
                }

                void Test(void)
                {
                    char* str = NULL;
                    str = GetMemory(&str);
                    printf(str);
                }

                int main()
                {
                    Tset();
                    return 0;
                }
        请问运行 Test 函数会有什么样的结果?


        代码3：

        void GetMomery(char** p, int num)
        {
            *p = (char*)malloc(num);
        }
        Test()
        {
            char* str = NULL;
            GetMomery(&str, 100);
            strcpy(str, "hello");
            printf(str);
            //忘记释放动态开辟内存，导致内存泄露
            //改
            free(str);
            str = NULL;
        }

        int main()
        {
            Test();
            return 0;
        }

        请问运行 Test 函数会有什么样的结果?




        代码4：

        Test()
        {
            char* str = (char*)malloc(100);
            strcpy(str, "hello");
            free(str);//free释放str指向的空间后，并不会把str置为NULL;
            //改
            str = NULL;
            //上面这句话是改的
            if (str != NULL)
            {
                strcpy(str, "world");
                printf(str);
            }
        }

        int main()
        {
            Test();
            return 0;
        }

        请问运行 Test 函数会有什么样的结果?

        答:篡改动态内存区的内容，后果难以预料，非常危险。
        因为 free(str);之后，str 成为野指针，if(str!= NULL)语句不起作用。






    C/C++程序的内存开辟


        C/C++程序内存分配的几个区域:
            1.栈区(stack):在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些
            存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有
            限。栈区主要存放运行函数而分配的局部变量、函数参数、返回数据、返回地址等。

            2.堆区(heap):一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式类似
            于链表。

            3.数据段(静态区) static)存放全局变量、静态数据。程序结束后由系统释放

            4.代码段:存放函数体(类成员函数和全局函数)的二进制代码。

        有了这幅图，我们就可以更好的理解在《C语言初识》中讲的static关键字修饰局部变量的例子了。
        注：图在VX收藏里
            实际上普通的局部变量是在栈区分配空间的，栈区的特点是在上面创建的变量出了作用域就销毁。
            但是被static修饰的变量存放在数据段(静态区)，数据段的特点是在上面创建的变量，直到程序结束才销毁
            所以生命周期变长。














        柔性数组
            也许你从来没有听说过柔性数组( flexible array) 这个概念，但是它确实是存在的。 C99 中，结构中的最
            后一个元素允许是未知大小的数组，这就叫做[柔性数组]成员。


            /*//struct S
            //{
            //	int n;
            //	int arr[10];
            //};

            //struct S
            //{
            //	int n;
            //	int arr[];//未知大小的-柔性数组
            //};

            struct S
            {
                int n;
                int arr[]; //未知大小的 - 柔性数组成员-数组的大小是可以调整的
            };

            int main()
            {
                //struct S s;
                //printf("%d\n", sizeof(s));//计算的时候不包含结构体成员
                struct S* ps = (struct S*)malloc(sizeof(struct S) + 5 * sizeof(int));//对柔性数组开辟空间
                //使用
                ps->n = 100;
                int i = 0;
                for (i = 0; i < 5; i++)
                {
                    ps->arr[i] = i;//0 1 2 3 4
                }
                struct S* ptr = realloc(ps, 44);
                if (ptr != NULL)
                {
                    ps = ptr;
                }
                for (i = 5; i < 10; i++)
                {
                    ps->arr[i] = i;
                }
                //打印
                for (i = 0; i < 10; i++)
                {
                    printf("%d ", ps->arr[i]);
                }
                //释放
                free(ps);
                ps = NULL;
                return 0;
            }*/


            还有一种写法是：
            struct S
            {
                int n;
                int* arr;
            };

            int main()
            {
                struct S* ps = (struct S*)malloc(sizeof(struct S));
                ps->arr = malloc(sizeof(5 * sizeof(int)));
                int i = 0;
                for (i = 0; i < 5; i++)
                {
                    ps->arr[i] = i;
                }
                for (i = 0; i < 5; i++)
                {
                    printf("%d ", ps->arr[i]);
                }
                //调整大小
                int* ptr = realloc(ps->arr, 10 * sizeof(int));
                if (ptr != NULL)
                {
                    ps->arr = ptr;
                }
                for (i = 5; i < 10; i++)
                {
                    ps->arr[i] = i;
                }
                for (i = 0; i < 10; i++)
                {
                    printf("%d ", ps->arr[i]);
                }
                free(ps->arr);
                ps->arr = NULL;
                free(ps);
                ps = NULL;
                return 0;
            }
                

            柔性数组的特点:

                结构中的柔性数组成员前面必须至少一个其他成员

                sizeof返回的这种结构大小不包括柔性数组的内存。

                包含柔性数组成员的结构用malloc (函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应
                柔性数组的预期大小。



            上述代码1和代码2可以完成同样的功能，但是 方法1的实现有两个好处:第一个好处是:方便内存释放

                如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给用户。用
                户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以你不能指望用户来发
                现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体
                指针，用户做一次free就可以把所有的内存也给释放掉
            第二个好处是:这样有利于访问速度
                连续的内存有益于提高访问速度，也有益于减少内存碎片。(其实，我个人觉得也没多高了，反正你跑不了
                要用做偏移量的加法来寻址)

            扩展阅读:

                C语言结构体里的数组和指针
                coolshell.cn/articles/4990.html


                寄存器
               ----------
              高速缓存器
            ---------------
                 内存
         ---------------------
                硬盘
    ---------------------------------

    越往上速度越快 但空间越小








代码1：
//struct S
//{
//	int n;
//	char c;
//	int arr[0];//柔性数组成员，如果这种形式编译不过去那就把0去掉[]写成这样的格式[]
//};

struct S
{
	int n;//4
	int arr[];//柔性数组成员
};

int main()
{
	//printf("%d\n", sizeof(struct S));//计算的时候不包含柔性数组成员	
	int i = 0;
	struct S* p = (struct S*)malloc(sizeof(struct S) + 10 * sizeof(int));

	p->n = 100;
	
	for (i = 0; i < 10; i++)
	{
		p->arr[i] = i;
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d ", p->arr[i]);
	}
	free(p);
	p = NULL;
	return 0;
}


代码2：
struct S
{
	int n;
	int* arr;
};

int main()
{
	struct S* p = (struct S*)malloc(sizeof(struct S));
	p->n = 100;
	p->arr =(int*)malloc(10 * sizeof(int));
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		p->arr[i] = i;
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d ", p->arr[i]);
	}
	//释放
	free(p->arr);//如果释放p的话就没人指向那两个元素了
	p->arr = NULL;
	free(p);
	p = NULL;
	return 0;
	//也可以达到类似柔性数组的效果 但是有缺点哦 malloc两次 如果项目多的话就不可取
}




            本章完