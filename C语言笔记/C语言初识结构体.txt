    结构体
        · 结构体类型的声明
        · 结构体初始化
        · 结构体成员访问
        · 结构体传参

    结构体的声明

       结构体的基础知识
            结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量

       结构的声明
            struct tag // struct 是结构体关键字  tag 是结构体的标签 tag可以替换假如要描述一个学生可以用student
            { //大括号里面就是结构体的值，这些值称为成员变量
                member-list;//member-list成员变量
            }variable-list;//变量列表

            代码：
            //描述一个学生-一些数据
            //名字
            //年龄
            //电话
            //性别

            ////struct 结构体关键字 stu - 结构体标签 可以替换假如要描述一个学生可以用student   struct stu - 结构体类型  要创建结构体变量  要在main中创建结构体变量
            //struct Stu//定义一个结构体类型 //定义结构体类型的时候不占用内存的空间 创建结构体变量的时候才去内存中申请了空间
            //{
            //	//成员变量
            //	char name[20];//存放名字
            //	short age;//年龄
            // 	char tele[12];//电话
            //	char sex[5];//性别
            //}s1,s2,s3;//s1,s2,s3 是三个全局的结构体变量	称变量列表 //变量列表 //这个分号不能丢 不可少 //因为他是结构体声明 结构体声明是一条语句 所以要加个分号
            //		  //尽量少使用全局变量，如果迫不得已的话可以使用

            //struct 结构体关键字 stu - 结构体标签 可以替换假如要描述一个学生可以用student   struct stu - 结构体类型  要创建结构体变量  要在main中创建结构体变量

           ---------------------------------------------------------分割线---------------------------------------------------------

            //总结：上面分号前面 是s1,s2,s3 是直接创建的结构体变量
            //		下面分号前面 是Stu 是直接把结构体类型struct Stu 改了一下名字 改成了 Stu  对类型进行重命名 

           ---------------------------------------------------------分割线---------------------------------------------------------

            //加强一点结构体的知识：以后并用以下的知识 上面那个 和下面这个有很大的区别 用下面这个的哦
            typedef struct Stu//typedef 重新给这个结构体类型起一个名字写到大括号的分号前面 //简单的理解就算把struct Stu改成了Stu
            {
                //成员变量
                char name[20];//存放名字
                short age;//年龄
                char tele[12];//电话
                char sex[5];//性别
            }Stu;//现在可以通过stu去创建变量了 
                //也就是相当于把结构体类型重新起了一个名字 并用这个名字创建变量 不重新起名字的话就得 struct Stu s创建结构体变量。 重新起名字就可以用 Stu s1 创建结构体变量
                //简单的理解就算把struct Stu改成了Stu
            int main()
            {
                struct Stu s1;//s 是创建出来的结构体变量 也是局部变量 //定义结构体类型的时候不占用内存的空间 创建结构体变量的时候才去内存中申请了空间
                            //简单的理解就算把struct Stu改成了Stu
                Stu s2;//通过typedef重新起了一个名字叫Stu，就可以通过这个名字起一个变量
                return 0;
            }



        结构成员的类型
            结构的成员可以是标量、数组、指针，甚至是其他结构体

        结构体变量的定义和初始化
            有了结构体类型，那如何定义变量，其实很简单

                //结构体变量的定义和初始化

                struct Point
                {
                    int x;
                    int y;
                }p1;				//声明类型的同时定义变量p1


                int main()
                {
                    //struct Point p2;	//定义结构体变量p2
                    struct Point p3 = { 1,2 }; //初始化：定义变量的时候赋初始值
                    return 0;
                }




                typedef struct Stu
                {
                    //成员变量
                    char name[20];//存放名字
                    short age;//年龄
                    char tele[12];//电话
                    char sex[5];//性别
                }Stu;
                int main()
                {
                    Stu s1 = { "张三",17,"15203334789","男" };//结构体变量初始化
                    struct Stu s2 = {"李四",30,"15503332589","女"};//结构体变量
                    return 0;
                }






                struct S
                {
                    int a;
                    char c;//char 是字符 用''   char [] 是字符串 用""  
                    char arr[20];
                    double d;
                };

                struct T
                {
                    char ch[10];
                    struct S s;////结构体嵌套使用
                    char* pc;
                };

                int main()
                {
                    char arr[] = "hello bit\n";
                    struct T t = { "hehe",{100,'w',"hello world",3.14},arr};////结构体嵌套初始化
                    printf("%s\n", t.ch);//hehe
                    printf("%d\n",t.s.a);//100
                    printf("%c\n",t.s.c);//w
                    printf("%s\n", t.s.arr);//hello world
                    printf("%lf\n", t.s.d);//3.14
                    printf("%s\n",t.pc);//hello bit
                    return 0;
                }


        结构体成员的访问
            结构体变量访问成员结构变量的成员是通过点操作符(.)访问的。点操作符接受两个操作数。例
                struct Stu
                {
                    char name[20];
                    int age;
                };

                struct Stu s;
            我们可以看到s有成员name和age;那我们如何访问s的成员?

                struct S s;
                strcpy(s.name,"zhangsan");//使用访何name成员
                s.age = 20;//使用访何age成员

             结构体指针访问指向变量的成员有时候我们得到的不是一个结构体变量，而是指向一个结构体的
             指针。

             那该如何访问成员。如下
                typedef struct Stu
                {
                    //成员变量
                    char name[20];//存放名字
                    short age;//年龄
                    char tele[12];//电话
                    char sex[5];//性别
                }Stu;

                void Print1(Stu tmp)//结构体传参
                {
                    printf("name：%s\n", tmp.name);//通过 点 访问
                    printf("age：%d\n", tmp.age);
                    printf("tele：%s\n", tmp.tele);
                    printf("sex：%s\n", tmp.sex);
                }

                void Pintf2(Stu* ps)//结构体指针传参
                {
                    printf("naem：%s\n", ps->name);//通过箭头-> 访问 箭头是针对结构体指针的
                    printf("age：%d\n", ps->age);
                    printf("tele：%s\n", ps->tele);
                    printf("sex：%s\n", ps->sex);
                }
                int main()
                {
                    Stu s = { "张三",17,"15233253654","男" };
                    //打印结构体数据
                    //问：Print1 和Print2 哪个更好？
                    //答案：首选Print2。原因：
                    //Print1：浪费内存也耗时间 形参是实参的一个临时拷贝 如果实参是200字节的话 还要拷贝过去 那也太浪费内存了
                    //Print2：省内存，传的是地址 一个地址无非就是 4 个字节或者8个字节 32平台4个字节 64平台8个字节 无论结构体多大我只传4/8个字节
                    //		  这里就是指针的意义----节省空间。
                    //	另外：2可以直接操作原本结构体，而1不能完成这项任务
                    //如果需要嵌套的话 嵌套：指针-->嵌套的结构体.成员变量
                    

                    //然后github可以上传代码了吗？  ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

                    Print1(s);//结构体传参
                    Pintf2(&s);//结构体址传参
                    return 0;
                }


        结构体传参:
                typedef struct Stu
                {
                    //成员变量
                    char name[20];//存放名字
                    short age;//年龄
                    char tele[12];//电话
                    char sex[5];//性别
                }Stu;

                void Print1(Stu tmp)//结构体传参
                {
                    printf("name：%s\n", tmp.name);//通过 点 访问
                    printf("age：%d\n", tmp.age);
                    printf("tele：%s\n", tmp.tele);
                    printf("sex：%s\n", tmp.sex);
                }

                void Pintf2(Stu* ps)//结构体指针传参
                {
                    printf("naem：%s\n", ps->name);//通过箭头-> 访问 箭头是针对结构体指针的
                    printf("age：%d\n", ps->age);
                    printf("tele：%s\n", ps->tele);
                    printf("sex：%s\n", ps->sex);
                }
                int main()
                {
                    Stu s = { "张三",17,"15233253654","男" };
                    //打印结构体数据
                    //问：Print1 和Print2 哪个更好？
                    //答案：首选Print2。原因：
                    //Print1：浪费内存也耗时间 形参是实参的一个临时拷贝 如果实参是200字节的话 还要拷贝过去 那也太浪费内存了
                    //Print2：省内存，传的是地址 一个地址无非就是 4 个字节或者8个字节 32平台4个字节 64平台8个字节 无论结构体多大我只传4/8个字节
                    //		  这里就是指针的意义----节省空间。
                    //	另外：2可以直接操作原本结构体，而1不能完成这项任务
                    //如果需要嵌套的话 嵌套：指针-->嵌套的结构体.成员变量
                    

                    //然后github可以上传代码了吗？  ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

                    Print1(s);//结构体传参
                    Pintf2(&s);//结构体址传参
                    return 0;
                }